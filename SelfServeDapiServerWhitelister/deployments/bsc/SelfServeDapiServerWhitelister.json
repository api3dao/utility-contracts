{
  "address": "0xD3c5Bbc86B8376f3f783db29BB4558507f686Fa4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dapiServer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "reader",
          "type": "address"
        }
      ],
      "name": "allowToReadDataFeedWithDapiNameFor30Days",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "reader",
          "type": "address"
        }
      ],
      "name": "allowToReadDataFeedWithIdFor30Days",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dapiServer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x863e26b2a08a393f9644a0a18de198ed5b0d49242f9a1e7bd9ae15ae7d8f2a10",
  "receipt": {
    "to": null,
    "from": "0x07b589f06bD0A5324c4E2376d66d2F4F25921DE1",
    "contractAddress": "0xD3c5Bbc86B8376f3f783db29BB4558507f686Fa4",
    "transactionIndex": 76,
    "gasUsed": "253346",
    "logsBloom": "0x
    "blockHash": "0x7e40aae744c27d09ee43cca74d94fb91d208a2c4fd2504381e2fa9d607d3fc2c",
    "transactionHash": "0x863e26b2a08a393f9644a0a18de198ed5b0d49242f9a1e7bd9ae15ae7d8f2a10",
    "logs": [],
    "blockNumber": 20753137,
    "cumulativeGasUsed": "6848596",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8B0A67D060C86919Ae76Ca3FA69c68Ff98E85c3c"
  ],
  "numDeployments": 1,
  "solcInputHash": "0d3f5db0b79768341b726b6659931b08",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dapiServer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"reader\",\"type\":\"address\"}],\"name\":\"allowToReadDataFeedWithDapiNameFor30Days\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"reader\",\"type\":\"address\"}],\"name\":\"allowToReadDataFeedWithIdFor30Days\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dapiServer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"dapiServer()\":{\"notice\":\"DapiServer contract address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SelfServeDapiServerWhitelister.sol\":\"SelfServeDapiServerWhitelister\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@api3/airnode-protocol-v1/contracts/access-control-registry/interfaces/IAccessControlRegistryAdminned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlRegistryUser.sol\\\";\\n\\ninterface IAccessControlRegistryAdminned is IAccessControlRegistryUser {\\n    function adminRoleDescription() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x0f3ad45d6e1a4815cfaff171926ad5352d499a431b041b11adb316f4569bcce4\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/access-control-registry/interfaces/IAccessControlRegistryAdminnedWithManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlRegistryAdminned.sol\\\";\\n\\ninterface IAccessControlRegistryAdminnedWithManager is\\n    IAccessControlRegistryAdminned\\n{\\n    function manager() external view returns (address);\\n\\n    function adminRole() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x8a8e1756fca81175305755b7a311536132e88173f60b2ac0fdeef92a6236afc5\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/access-control-registry/interfaces/IAccessControlRegistryUser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAccessControlRegistryUser {\\n    function accessControlRegistry() external view returns (address);\\n}\\n\",\"keccak256\":\"0xce1ceb04823a801ea173fe5140344645295768ff1b4d2ee2969c2f4b362102ca\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/dapis/DapiReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IDapiReader.sol\\\";\\n\\n/// @title Contract to be inherited by contracts that will read from a\\n/// DapiServer contract\\ncontract DapiReader is IDapiReader {\\n    /// @notice DapiServer contract address\\n    address public override dapiServer;\\n\\n    /// @param _dapiServer DapiServer contract address\\n    constructor(address _dapiServer) {\\n        setDapiServer(_dapiServer);\\n    }\\n\\n    /// @notice Called internally to update the DapiServer contract address\\n    /// @dev Inheriting contracts are highly recommended to expose this\\n    /// functionality to be able to migrate between DapiServer contracts.\\n    /// Otherwise, when the DapiServer goes out of service for any reason,\\n    /// the dependent contract will go defunct.\\n    /// Since this is a critical action, it needs to be protected behind\\n    /// mechanisms such as decentralized governance, timelocks, etc.\\n    /// @param _dapiServer DapiServer contract address\\n    function setDapiServer(address _dapiServer) internal {\\n        require(_dapiServer != address(0), \\\"dAPI server address zero\\\");\\n        dapiServer = _dapiServer;\\n    }\\n}\\n\",\"keccak256\":\"0xbbb143f391c0043cf3f508211982844e170b490e766fef3bfe14137c02d1bf57\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/dapis/interfaces/IDapiReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDapiReader {\\n    function dapiServer() external view returns (address);\\n}\\n\\n/// @dev We use the part of the interface that will persist between\\n/// DapiServer versions\\ninterface IBaseDapiServer {\\n    function readDataFeedWithId(bytes32 dataFeedId)\\n        external\\n        view\\n        returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedWithDapiName(bytes32 dapiName)\\n        external\\n        view\\n        returns (int224 value, uint32 timestamp);\\n}\\n\",\"keccak256\":\"0x6a5a48dc7b8a63ec0ebb414827d091ac3b34c59d5d932538d5d1f17bd1f7925e\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/dapis/interfaces/IDapiServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../protocol/interfaces/IAirnodeRequester.sol\\\";\\n\\ninterface IDapiServer is IAirnodeRequester {\\n    event SetRrpBeaconUpdatePermissionStatus(\\n        address indexed sponsor,\\n        address indexed rrpBeaconUpdateRequester,\\n        bool status\\n    );\\n\\n    event RequestedRrpBeaconUpdate(\\n        bytes32 indexed beaconId,\\n        address indexed sponsor,\\n        address indexed requester,\\n        bytes32 requestId,\\n        address airnode,\\n        bytes32 templateId\\n    );\\n\\n    event RequestedRrpBeaconUpdateRelayed(\\n        bytes32 indexed beaconId,\\n        address indexed sponsor,\\n        address indexed requester,\\n        bytes32 requestId,\\n        address airnode,\\n        address relayer,\\n        bytes32 templateId\\n    );\\n\\n    event UpdatedBeaconWithRrp(\\n        bytes32 indexed beaconId,\\n        bytes32 requestId,\\n        int256 value,\\n        uint256 timestamp\\n    );\\n\\n    event RegisteredBeaconUpdateSubscription(\\n        bytes32 indexed subscriptionId,\\n        address airnode,\\n        bytes32 templateId,\\n        bytes parameters,\\n        bytes conditions,\\n        address relayer,\\n        address sponsor,\\n        address requester,\\n        bytes4 fulfillFunctionId\\n    );\\n\\n    event UpdatedBeaconWithPsp(\\n        bytes32 indexed beaconId,\\n        bytes32 subscriptionId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedBeaconWithSignedData(\\n        bytes32 indexed beaconId,\\n        int256 value,\\n        uint256 timestamp\\n    );\\n\\n    event UpdatedBeaconSetWithBeacons(\\n        bytes32 indexed beaconSetId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedBeaconSetWithSignedData(\\n        bytes32 indexed dapiId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event AddedUnlimitedReader(address indexed unlimitedReader);\\n\\n    event SetDapiName(\\n        bytes32 indexed dapiName,\\n        bytes32 dataFeedId,\\n        address indexed sender\\n    );\\n\\n    function setRrpBeaconUpdatePermissionStatus(\\n        address rrpBeaconUpdateRequester,\\n        bool status\\n    ) external;\\n\\n    function requestRrpBeaconUpdate(\\n        address airnode,\\n        bytes32 templateId,\\n        address sponsor\\n    ) external returns (bytes32 requestId);\\n\\n    function requestRrpBeaconUpdateRelayed(\\n        address airnode,\\n        bytes32 templateId,\\n        address relayer,\\n        address sponsor\\n    ) external returns (bytes32 requestId);\\n\\n    function fulfillRrpBeaconUpdate(\\n        bytes32 requestId,\\n        uint256 timestamp,\\n        bytes calldata data\\n    ) external;\\n\\n    function registerBeaconUpdateSubscription(\\n        address airnode,\\n        bytes32 templateId,\\n        bytes memory conditions,\\n        address relayer,\\n        address sponsor\\n    ) external returns (bytes32 subscriptionId);\\n\\n    function conditionPspBeaconUpdate(\\n        bytes32 subscriptionId,\\n        bytes calldata data,\\n        bytes calldata conditionParameters\\n    ) external view returns (bool);\\n\\n    function fulfillPspBeaconUpdate(\\n        bytes32 subscriptionId,\\n        address airnode,\\n        address relayer,\\n        address sponsor,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external;\\n\\n    function updateBeaconWithSignedData(\\n        address airnode,\\n        bytes32 beaconId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external;\\n\\n    function updateBeaconSetWithBeacons(bytes32[] memory beaconIds)\\n        external\\n        returns (bytes32 beaconSetId);\\n\\n    function updateBeaconSetWithBeaconsAndReturnCondition(\\n        bytes32[] memory beaconIds,\\n        uint256 updateThresholdInPercentage\\n    ) external returns (bool);\\n\\n    function conditionPspBeaconSetUpdate(\\n        bytes32 subscriptionId,\\n        bytes calldata data,\\n        bytes calldata conditionParameters\\n    ) external returns (bool);\\n\\n    function fulfillPspBeaconSetUpdate(\\n        bytes32 subscriptionId,\\n        address airnode,\\n        address relayer,\\n        address sponsor,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external;\\n\\n    function updateBeaconSetWithSignedData(\\n        address[] memory airnodes,\\n        bytes32[] memory templateIds,\\n        uint256[] memory timestamps,\\n        bytes[] memory data,\\n        bytes[] memory signatures\\n    ) external returns (bytes32 beaconSetId);\\n\\n    function addUnlimitedReader(address unlimitedReader) external;\\n\\n    function setDapiName(bytes32 dapiName, bytes32 dataFeedId) external;\\n\\n    function dapiNameToDataFeedId(bytes32 dapiName)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function readDataFeedWithId(bytes32 dataFeedId)\\n        external\\n        view\\n        returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedValueWithId(bytes32 dataFeedId)\\n        external\\n        view\\n        returns (int224 value);\\n\\n    function readDataFeedWithDapiName(bytes32 dapiName)\\n        external\\n        view\\n        returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedValueWithDapiName(bytes32 dapiName)\\n        external\\n        view\\n        returns (int224 value);\\n\\n    function readerCanReadDataFeed(bytes32 dataFeedId, address reader)\\n        external\\n        view\\n        returns (bool);\\n\\n    function dataFeedIdToReaderToWhitelistStatus(\\n        bytes32 dataFeedId,\\n        address reader\\n    )\\n        external\\n        view\\n        returns (uint64 expirationTimestamp, uint192 indefiniteWhitelistCount);\\n\\n    function dataFeedIdToReaderToSetterToIndefiniteWhitelistStatus(\\n        bytes32 dataFeedId,\\n        address reader,\\n        address setter\\n    ) external view returns (bool indefiniteWhitelistStatus);\\n\\n    function deriveBeaconId(address airnode, bytes32 templateId)\\n        external\\n        pure\\n        returns (bytes32 beaconId);\\n\\n    function deriveBeaconSetId(bytes32[] memory beaconIds)\\n        external\\n        pure\\n        returns (bytes32 beaconSetId);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DAPI_NAME_SETTER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function HUNDRED_PERCENT() external view returns (uint256);\\n\\n    function dapiNameSetterRole() external view returns (bytes32);\\n\\n    function sponsorToRrpBeaconUpdateRequesterToPermissionStatus(\\n        address sponsor,\\n        address updateRequester\\n    ) external view returns (bool);\\n\\n    function subscriptionIdToBeaconId(bytes32 subscriptionId)\\n        external\\n        view\\n        returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6a09876c58ae7ba79531eb8276d6b9501add508c73b86a18b1bf641da194391f\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/protocol/interfaces/IAirnodeRequester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAirnodeRequester {\\n    function airnodeProtocol() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa2412446bb860cfaafa447d99d0f41ba6977e7f2b6b743a09c16b1ff58186309\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/whitelist/interfaces/IWhitelistRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWhitelistRoles {\\n    // solhint-disable-next-line func-name-mixedcase\\n    function WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function INDEFINITE_WHITELISTER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0x1143190e909f6aa779e99d143fdb26a91e42d269814a0d76152d31418db39fbf\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/whitelist/interfaces/IWhitelistRolesWithManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IWhitelistRoles.sol\\\";\\nimport \\\"../../access-control-registry/interfaces/IAccessControlRegistryAdminnedWithManager.sol\\\";\\n\\ninterface IWhitelistRolesWithManager is\\n    IWhitelistRoles,\\n    IAccessControlRegistryAdminnedWithManager\\n{\\n    function whitelistExpirationExtenderRole() external view returns (bytes32);\\n\\n    function whitelistExpirationSetterRole() external view returns (bytes32);\\n\\n    function indefiniteWhitelisterRole() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xe9c34f92e73b4231b96db8b57c86d4d1be2822b73de74a09b6f9d41b433a7310\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/whitelist/interfaces/IWhitelistWithManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IWhitelistRolesWithManager.sol\\\";\\n\\ninterface IWhitelistWithManager is IWhitelistRolesWithManager {\\n    event ExtendedWhitelistExpiration(\\n        bytes32 indexed serviceId,\\n        address indexed user,\\n        address indexed sender,\\n        uint256 expiration\\n    );\\n\\n    event SetWhitelistExpiration(\\n        bytes32 indexed serviceId,\\n        address indexed user,\\n        address indexed sender,\\n        uint256 expiration\\n    );\\n\\n    event SetIndefiniteWhitelistStatus(\\n        bytes32 indexed serviceId,\\n        address indexed user,\\n        address indexed sender,\\n        bool status,\\n        uint192 indefiniteWhitelistCount\\n    );\\n\\n    event RevokedIndefiniteWhitelistStatus(\\n        bytes32 indexed serviceId,\\n        address indexed user,\\n        address indexed setter,\\n        address sender,\\n        uint192 indefiniteWhitelistCount\\n    );\\n\\n    function extendWhitelistExpiration(\\n        bytes32 serviceId,\\n        address user,\\n        uint64 expirationTimestamp\\n    ) external;\\n\\n    function setWhitelistExpiration(\\n        bytes32 serviceId,\\n        address user,\\n        uint64 expirationTimestamp\\n    ) external;\\n\\n    function setIndefiniteWhitelistStatus(\\n        bytes32 serviceId,\\n        address user,\\n        bool status\\n    ) external;\\n\\n    function revokeIndefiniteWhitelistStatus(\\n        bytes32 serviceId,\\n        address user,\\n        address setter\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcb96ba49728039b8c77380d97bee678124477f77e4a23c6c34144c4148853ec3\",\"license\":\"MIT\"},\"contracts/SelfServeDapiServerWhitelister.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"@api3/airnode-protocol-v1/contracts/dapis/DapiReader.sol\\\";\\nimport \\\"./interfaces/ISelfServeDapiServerWhitelister.sol\\\";\\nimport \\\"@api3/airnode-protocol-v1/contracts/dapis/interfaces/IDapiServer.sol\\\";\\nimport \\\"@api3/airnode-protocol-v1/contracts/whitelist/interfaces/IWhitelistWithManager.sol\\\";\\n\\ncontract SelfServeDapiServerWhitelister is\\n    DapiReader,\\n    ISelfServeDapiServerWhitelister\\n{\\n    constructor(address _dapiServer) DapiReader(_dapiServer) {}\\n\\n    function allowToReadDataFeedWithIdFor30Days(\\n        bytes32 dataFeedId,\\n        address reader\\n    ) public override {\\n        (uint64 expirationTimestamp, ) = IDapiServer(dapiServer)\\n            .dataFeedIdToReaderToWhitelistStatus(dataFeedId, reader);\\n        uint64 targetedExpirationTimestamp = uint64(block.timestamp + 30 days);\\n        if (targetedExpirationTimestamp > expirationTimestamp) {\\n            IWhitelistWithManager(dapiServer).extendWhitelistExpiration(\\n                dataFeedId,\\n                reader,\\n                targetedExpirationTimestamp\\n            );\\n        }\\n    }\\n\\n    function allowToReadDataFeedWithDapiNameFor30Days(\\n        bytes32 dapiName,\\n        address reader\\n    ) external override {\\n        allowToReadDataFeedWithIdFor30Days(\\n            keccak256(abi.encodePacked(dapiName)),\\n            reader\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2f1771dded75d52947739db6425250cf791e9cc3ec5924ab4c73fb0f7f333c6a\",\"license\":\"MIT\"},\"contracts/interfaces/ISelfServeDapiServerWhitelister.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"@api3/airnode-protocol-v1/contracts/dapis/interfaces/IDapiReader.sol\\\";\\n\\ninterface ISelfServeDapiServerWhitelister is IDapiReader {\\n    function allowToReadDataFeedWithIdFor30Days(bytes32 dataFeedId, address reader)\\n        external;\\n\\n    function allowToReadDataFeedWithDapiNameFor30Days(bytes32 dapiName, address reader)\\n        external;\\n}\\n\",\"keccak256\":\"0x363a6763ceba433fe9a3ceb082a1f6e1c3fd7637d6e0d642e0591a2d179f9367\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161042c38038061042c83398101604081905261002f916100bc565b8061003981610040565b50506100ec565b6001600160a01b03811661009a5760405162461bcd60e51b815260206004820152601860248201527f64415049207365727665722061646472657373207a65726f0000000000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000602082840312156100ce57600080fd5b81516001600160a01b03811681146100e557600080fd5b9392505050565b610331806100fb6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633b780fa4146100465780639f03866b1461005b578063c33a0c3a1461008a575b600080fd5b610059610054366004610227565b61009d565b005b60005461006e906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b610059610098366004610227565b6100d3565b6100cf826040516020016100b391815260200190565b60405160208183030381529060405280519060200120826100d3565b5050565b600080546040517fd39c8968000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b0384811660248301529091169063d39c8968906044016040805180830381865afa15801561013d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101619190610263565b50905060006101734262278d006102bc565b90508167ffffffffffffffff168167ffffffffffffffff161115610221576000546040517fa6b1b9a2000000000000000000000000000000000000000000000000000000008152600481018690526001600160a01b03858116602483015267ffffffffffffffff841660448301529091169063a6b1b9a290606401600060405180830381600087803b15801561020857600080fd5b505af115801561021c573d6000803e3d6000fd5b505050505b50505050565b6000806040838503121561023a57600080fd5b8235915060208301356001600160a01b038116811461025857600080fd5b809150509250929050565b6000806040838503121561027657600080fd5b825167ffffffffffffffff8116811461028e57600080fd5b602084015190925077ffffffffffffffffffffffffffffffffffffffffffffffff8116811461025857600080fd5b600082198211156102f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea2646970667358221220c0cc797d0402b35adbced11ab700233c478658d5bce56288657a7b4158fe2cee64736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80633b780fa4146100465780639f03866b1461005b578063c33a0c3a1461008a575b600080fd5b610059610054366004610227565b61009d565b005b60005461006e906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b610059610098366004610227565b6100d3565b6100cf826040516020016100b391815260200190565b60405160208183030381529060405280519060200120826100d3565b5050565b600080546040517fd39c8968000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b0384811660248301529091169063d39c8968906044016040805180830381865afa15801561013d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101619190610263565b50905060006101734262278d006102bc565b90508167ffffffffffffffff168167ffffffffffffffff161115610221576000546040517fa6b1b9a2000000000000000000000000000000000000000000000000000000008152600481018690526001600160a01b03858116602483015267ffffffffffffffff841660448301529091169063a6b1b9a290606401600060405180830381600087803b15801561020857600080fd5b505af115801561021c573d6000803e3d6000fd5b505050505b50505050565b6000806040838503121561023a57600080fd5b8235915060208301356001600160a01b038116811461025857600080fd5b809150509250929050565b6000806040838503121561027657600080fd5b825167ffffffffffffffff8116811461028e57600080fd5b602084015190925077ffffffffffffffffffffffffffffffffffffffffffffffff8116811461025857600080fd5b600082198211156102f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea2646970667358221220c0cc797d0402b35adbced11ab700233c478658d5bce56288657a7b4158fe2cee64736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "dapiServer()": {
        "notice": "DapiServer contract address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 44,
        "contract": "contracts/SelfServeDapiServerWhitelister.sol:SelfServeDapiServerWhitelister",
        "label": "dapiServer",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}